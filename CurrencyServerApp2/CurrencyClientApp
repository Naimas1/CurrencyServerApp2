namespace CurrencyClientApp
{
    public partial class ClientForm : Form
    {
        private HttpClient httpClient = new HttpClient();

        public bool InvokeRequired { get; private set; }

        public ClientForm(HttpClient httpClient)
        {
            InitializeComponent();
            this.httpClient = httpClient;
        }

        private void InitializeComponent()
        {
            throw new NotImplementedException();
        }

        private async void buttonUploadImages_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.Filter = "Image files (*.jpg, *.jpeg, *.png) | *.jpg; *.jpeg; *.png";
                openFileDialog.Multiselect = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    await UploadFiles(openFileDialog.FileNames);
                }
            }
        }

        private async Task UploadFiles(object fileNames)
        {
            throw new NotImplementedException();
        }

        private async Task UploadFiles(string[] filePaths)
        {
            using (var content = new MultipartFormDataContent())
            {
                foreach (var filePath in filePaths)
                {
                    content.Add(new StreamContent(File.OpenRead(filePath)), "files", Path.GetFileName(filePath));
                }

                var response = await httpClient.PostAsync("http://localhost:5000/api/file/upload", content);
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadAsStringAsync();
                    AppendText("Files uploaded successfully: " + result);
                }
                else
                {
                    AppendText("Failed to upload files.");
                }
            }
        }

        private async void ButtonDeleteImage_Click(object sender, EventArgs e)
        {
            // Assume selectedImageFileName contains the name of the selected image to be deleted.
            string selectedImageFileName = "example.jpg";

            var confirmResult = MessageBox.Show("Are you sure to delete this image?", "Confirm Delete", MessageBoxButtons.YesNo);
            if (confirmResult == DialogResult.Yes)
            {
                var response = await httpClient.DeleteAsync($"http://localhost:5000/api/file/{selectedImageFileName}");
                if (response.IsSuccessStatusCode)
                {
                    AppendText("File deleted successfully.");
                }
                else
                {
                    AppendText("Failed to delete file.");
                }
            }
        }

        private void AppendText(string text)
        {
            if (InvokeRequired)
            {
                Invoke(new Action<string>(AppendText), new object[] { text });
            }
            else
            {
                textBox1.AppendText(text + Environment.NewLine);
            }
        }

        private void Invoke(Action<string> action, object[] objects)
        {
            throw new NotImplementedException();
        }
    }

    internal class textBox1
    {
        internal static void AppendText(string v)
        {
            throw new NotImplementedException();
        }
    }

    internal class MessageBoxButtons
    {
        public static object YesNo { get; internal set; }
    }

    internal class MessageBox
    {
        internal static object Show(string v1, string v2, object yesNo)
        {
            throw new NotImplementedException();
        }
    }

    internal class DialogResult
    {
        public static object OK { get; internal set; }
        public static object Yes { get; internal set; }
    }

    internal class OpenFileDialog
    {
        internal object FileNames;

        public OpenFileDialog()
        {
        }

        public string Filter { get; internal set; }
        public bool Multiselect { get; internal set; }

        internal object ShowDialog()
        {
            throw new NotImplementedException();
        }
    }

    public class Form
    {
        private HttpClient httpClient = new HttpClient();
        private List<string> imageFileNames = new List<string>();

        private void AppendText(string text)
        {
            if (InvokeRequired)
            {
                Invoke(new Action<string>(AppendText), new object[] { text });
            }
            else
            {
                textBox1.AppendText(text + Environment.NewLine);
            }
        }

        private void buttonDeleteImage_Click(object sender, EventArgs e)
        {
            string selectedImageFileName = "example.jpg"; // Замість цього використовуйте фактичне ім'я вибраного файлу
            ConfirmDelete(selectedImageFileName);
        }

        private async void buttonUploadImages_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.Filter = "Image files (*.jpg, *.jpeg, *.png) | *.jpg; *.jpeg; *.png";
                openFileDialog.Multiselect = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    await UploadFiles(openFileDialog.FileNames);
                    LoadImages();
                }
            }
        }

        private async void buttonUploadImages_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.Filter = "Image files (*.jpg, *.jpeg, *.png) | *.jpg; *.jpeg; *.png";
                openFileDialog.Multiselect = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    await UploadFiles(openFileDialog.FileNames);
                    LoadImages();
                }
            }
        }

        private void DisplayImages()
        {
            // Assume carousel is a control that displays images in a carousel format.
            carousel.Images = imageFileNames;
            carousel.Refresh();
        }

        private async void LoadImages()
        {
            imageFileNames = await GetImagesFileNamesAsync();
            DisplayImages();
        }

        private async Task UploadFiles(string[] filePaths)
        {
            using (var content = new MultipartFormDataContent())
            {
                foreach (var filePath in filePaths)
                {
                    content.Add(new StreamContent(File.OpenRead(filePath)), "files", Path.GetFileName(filePath));
                }

                var response = await httpClient.PostAsync("http://localhost:5000/api/file/upload", content);
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadAsStringAsync();
                    AppendText("Files uploaded successfully: " + result);
                }
                else
                {
                    AppendText("Failed to upload files.");
                }
            }
        }
    }
}
